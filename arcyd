#!/usr/bin/env python
# encoding: utf-8

"""Arcyd automates the creation and landing of reviews from branches"""

import argparse
import datetime
import platform
import sys
import time
import traceback

import abdi_processrepo
import abdmail_mailer
import abdmail_printsender
import phlmail_format
import phlsys_conduit
import phlsys_fs
import phlsys_sendmail
import phlsys_subprocess


class ConsoleOutput(object):

    def __init__(self):
        self.last_output = ""

    def display(self, s):
        sys.stdout.write("\r" + " " * len(self.last_output))
        now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        self.last_output = "(" + now + ") " + s
        sys.stdout.write("\r" + self.last_output)
        sys.stdout.flush()


def setupParser(name, module, subparsers):
    doc = module.__doc__
    docSubject = doc.splitlines()[0]
    docEpilog = '\n'.join(doc.splitlines()[1:])
    parser = subparsers.add_parser(
        name,
        formatter_class=argparse.RawDescriptionHelpFormatter,
        help=docSubject,
        description=docSubject,
        epilog=docEpilog,
        fromfile_prefix_chars=module.getFromfilePrefixChars())
    module.setupParser(parser)
    parser.set_defaults(func=module.process)


# TODO: this belongs in a file of its own
class Single(object):
    """watch a single repository"""

    @staticmethod
    def getFromfilePrefixChars():
        return '@'

    @staticmethod
    def setupParser(parser):
        # TODO: add help messages
        parser.add_argument(
            '--instance-uri',
            metavar="URI",
            type=str,
            required=True,
            help="instance to connect to, e.g. http://127.0.0.1")
        parser.add_argument(
            '--arcyd-user',
            metavar="USER",
            type=str,
            required=True,
            help="username for Arcyd to use")
        parser.add_argument(
            '--arcyd-cert',
            metavar="CERT",
            type=str,
            required=True,
            help="Phabricator Conduit API certificate to use, this is the "
            "value that you will find in your user account in Phabricator "
            "at: http://your.server.example/settings/panel/conduit/. "
            "It can also be found in ~/.arcrc.")
        parser.add_argument(
            '--arcyd-email',
            metavar="FROM",
            type=str,
            required=True,
            help="email address for Arcyd to send mails from")
        parser.add_argument(
            '--admin-email',
            metavar="TO",
            type=str,
            required=True,
            help="email address to send important system events to")
        parser.add_argument(
            '--repo-desc',
            metavar="DESC",
            type=str,
            required=True,
            help="description to use in emails")
        parser.add_argument(
            '--repo-path',
            metavar="PATH",
            type=str,
            required=True,
            help="path to the repository on disk")
        parser.add_argument(
            '--https-proxy',
            metavar="PROXY",
            type=str,
            help="proxy to use, if necessary")
        parser.add_argument(
            '--sleep-secs',
            metavar="TIME",
            type=int,
            default=60,
            help="time to wait between fetches")

    @staticmethod
    def process(args):
        out = ConsoleOutput()

        while True:
            Single.run_once(args, out)

            sleep_remaining = args.sleep_secs
            while sleep_remaining > 0:
                out.display("sleep (" + str(sleep_remaining) + " seconds) ")
                time.sleep(1)
                sleep_remaining -= 1

    # TODO: this belongs in a file of its own
    @staticmethod
    def run_once(args, out):
        print_sender = abdmail_printsender.MailSender(args.arcyd_email)
        mailer = abdmail_mailer.Mailer(
            print_sender,
            [args.admin_email],
            args.repo_desc)

        with phlsys_fs.chDirContext(args.repo_path):
            out.display("fetch (" + args.repo_desc + "): ")
            phlsys_subprocess.runCommands("git fetch -p")

        # XXX: until conduit refreshes the connection, we'll suffer from
        #      timeouts; reduce the probability of this by using a new
        #      conduit each time.
        conduit = phlsys_conduit.Conduit(
            args.instance_uri,
            args.arcyd_user,
            args.arcyd_cert,
            https_proxy=args.https_proxy)

        out.display("process (" + args.repo_desc + "): ")
        abdi_processrepo.processUpdatedRepo(
            conduit, args.repo_path, "origin", mailer)


# TODO: this belongs in a file of its own
class Multi(object):
    """watch multiple repositories"""

    @staticmethod
    def getFromfilePrefixChars():
        return None

    @staticmethod
    def setupParser(parser):
        parser.add_argument(
            '--repo-configs',
            metavar="N",
            action='append',
            nargs='+',
            type=str,
            help="files to load configuration from, prefix with @")
        parser.add_argument(
            '--sleep-secs',
            metavar="TIME",
            type=int,
            default=60,
            help="time to wait between runs through the list")

    @staticmethod
    def process(args):
        repos = list()
        for repo in args.repo_configs:
            parser = argparse.ArgumentParser(
                fromfile_prefix_chars=Single.getFromfilePrefixChars())
            Single.setupParser(parser)
            repo_args = parser.parse_args(repo)
            repos.append(repo_args)

        out = ConsoleOutput()

        while True:
            for repo in repos:
                Single.run_once(repo, out)

            sleep_remaining = args.sleep_secs
            while sleep_remaining > 0:
                out.display("sleep (" + str(sleep_remaining) + " seconds) ")
                time.sleep(1)
                sleep_remaining -= 1


def main():
    description = str("""
Arcyd - an arcanist branch daemon

Intended to make it easy for large teams to start using Differential without
individual contributors needing to install and configure Arcanist.

Individual contributors are still free to use Arcanist if they wish, Arcyd
provides a zero-config layer over Git to get them started.

Arcyd does the following:
- watches for specially named branches and automatically creates revisions
- automatically updates revisions when the branch changes
- automatically lands revisions when they are approved

minimal user workflow:
    $ git checkout feature/mywork
    ~ commit some work on the branch ~
    $ git push origin feature/mywork:ph-review/mywork/master

    .. Arcyd see's the 'ph-review' branch and creates a review ..
    .. Reviewer accepts the change ..
    .. Arcyd squashes the 'ph-review' branch onto master and deletes it ..
        """)

    epilog = str("""
usage example:
    Using the example accounts baked into the 'phabricator-tools'
    vagrant/puppet installation. (see ./README)

    $ arcyd
    --system-admin-email systemadmin@server.test \\
    --sendmail-binary sendmail \\
    single \\
    --instance-uri https://127.0.0.1/api/ \\
    --arcyd-user phab \\
    --arcyd-cert xnh5tpatpfh4pff4tpnvdv74mh74zkmsualo4l6mx7bb262zqr55vcachxgz7\
ru3lrvafgzquzl3geyjxw426ujcyqdi2t4ktiv7gmrtlnc3hsy2eqsmhvgifn2vah2uidj6u6hhhxo\
2j3y2w6lcsehs2le4msd5xsn4f333udwvj6aowokq5l2llvfsl3efcucraawtvzw462q2sxmryg5y5\
rpicdk3lyr3uvot7fxrotwpi3ty2b2sa2kvlpf
    --arcyd-email phab-role-account@server.example \\
    --admin-email admin@server.example \\
    --repo-desc http://server.example/repo.git \\
    --sleep-duration 60

    You can also split the configuration across multiple files and combine them
    on the command-line or have them inherit from eachother.

    in localinstance.cfg:
        --instance-uri
        https://127.0.0.1/api/
        --arcyd-user
        phab
        --arcyd-cert
        <<paste-certificate-here>>

    in email.cfg:
        --arcyd-email
        phab-role-account@server.example
        --admin-email
        admin@server.example

    in repo1.cfg:
        --repo-desc
        http://server.example/repo.git
        --repo-path
        /path/to/repo

    to run arcyd:
    $ arcyd
    --system-admin-email systemadmin@server.test \\
    --sendmail-binary sendmail \\
    single @localinstance.cfg @email.cfg @repo1.cfg

    or you can use inheritance, e.g. in repo2.cfg:
        @localinstance.cfg
        @email.cfg
        --repo-desc
        http://server.example/repo2.git
        --repo-path
        /path/to/repo

    to run arcyd:
    $ arcyd
    --system-admin-email systemadmin@server.test \\
    --sendmail-binary sendmail \\
    single @localinstance.cfg @email.cfg @repo1.cfg
    """)

    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=description,
        epilog=epilog)

    parser.add_argument(
        '--sys-admin-emails',
        metavar="EMAIL",
        nargs="+",
        type=str,
        required=True,
        help="email addresses to send important system events to")

    parser.add_argument(
        '--sendmail-binary',
        metavar="PROGRAM",
        type=str,
        default="sendmail",
        required=True,
        help="program to send the mail with (e.g. sendmail)")

    subparsers = parser.add_subparsers()

    setupParser("single", Single, subparsers)
    setupParser("multi", Multi, subparsers)

    args = parser.parse_args()

    sendmail = phlsys_sendmail.Sendmail(args.sendmail_binary)
    uname = str(platform.uname())
    sender = "arcyd@" + platform.node()

    mime = phlmail_format.Text(
        subject="arcyd started",
        message=uname,
        from_address=sender,
        to_addresses=args.sys_admin_emails)
    sendmail.send(mime)

    try:
        args.func(args)
    except Exception:
        message = uname + "\n" + traceback.format_exc()
        mime = phlmail_format.Text(
            subject="arcyd stopped with exception",
            message=message,
            from_address=sender,
            to_addresses=args.sys_admin_emails)
        sendmail.send(mime)


if __name__ == "__main__":
    sys.exit(main())

#------------------------------------------------------------------------------
# Copyright (C) 2012 Bloomberg L.P.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.
#------------------------------- END-OF-FILE ----------------------------------
