#!/usr/bin/env python
# encoding: utf-8

"""Arcyd automates the creation and landing of reviews from branches"""

import argparse
import datetime
import sys
import time

import abdcmd_default
import abdmail_printsender
import abdmail_mailer
import phlsys_conduit
import phlsys_subprocess


class ConsoleOutput(object):

    def __init__(self):
        self.last_output = ""

    def display(self, s):
        sys.stdout.write("\r" + " " * len(self.last_output))
        now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        self.last_output = "(" + now + ") " + s
        sys.stdout.write("\r" + self.last_output)
        sys.stdout.flush()


def main():

    description = str("""
Arcyd - an arcanist branch daemon

Intended to make it easy for large teams to start using Differential without
individual contributors needing to install and configure Arcanist.

Individual contributors are still free to use Arcanist if they wish, Arcyd
provides a zero-config layer over Git to get them started.

Arcyd does the following:
- watches for specially named branches and automatically creates revisions
- automatically updates revisions when the branch changes
- automatically lands revisions when they are approved

minimal user workflow:
    $ git checkout feature/mywork
    ~ commit some work on the branch ~
    $ git push origin feature/mywork:ph-review/mywork/master

    .. Arcyd see's the 'ph-review' branch and creates a review ..
    .. Reviewer accepts the change ..
    .. Arcyd squashes the 'ph-review' branch onto master and deletes it ..
        """)

    epilog = str("""
usage example:
    Using the example accounts baked into the 'phabricator-tools'
    vagrant/puppet installation. (see ./README)

    $ arcyd
    --instance-uri https://127.0.0.1/api/ \\
    --arcyd-user phab \\
    --arcyd-certificate ntvymp7ezaeysbzgzhrn7udf5t5hz3426ynlgtrhzuww3yuuksk7sh\
dhicxxfh37ccvlufn6o7v744dlrw4vwkohbktclxaac7akb7yynzoiaqzqyexmoouimdeqfioxzxn5\
czivjtdyvflcv7i7ubxdee2yjikg52sd76ydy5wg5rhkbffipkvzr2ju324ztyzkilb56ibofnvwlw\
lenr2vs3a3hk4246kptcvdvp2qmhkwomphpu224kqrh3d \\
    --arcyd-email phab-role-account@server.example \\
    --admin-email admin@server.example \\
    --repo-description http://server.example/repo.git \\
    --sleep-duration 60

    """)

    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=description,
        epilog=epilog)

    # TODO: add help messages
    parser.add_argument(
        '--instance-uri',
        metavar="URI",
        type=str,
        required=True,
        help="instance to connect to, e.g. http://127.0.0.1")
    parser.add_argument(
        '--arcyd-user',
        metavar="USER",
        type=str,
        required=True,
        help="username for Arcyd to use")
    parser.add_argument(
        '--arcyd-cert',
        metavar="CERT",
        type=str,
        required=True,
        help="Phabricator Conduit API certificate to use, this is the value "
             "that you will find in your user account in Phabricator at: "
             "http://your.server.example/settings/panel/conduit/. "
             "It can also be found in ~/.arcrc.")
    parser.add_argument(
        '--arcyd-email',
        metavar="FROM",
        type=str,
        required=True,
        help="email address for Arcyd to send mails from")
    parser.add_argument(
        '--admin-email',
        metavar="TO",
        type=str,
        required=True,
        help="email address to send important system events to")
    parser.add_argument(
        '--repo-desc',
        metavar="DESC",
        type=str,
        required=True,
        help="description to use in emails")
    parser.add_argument(
        '--https-proxy',
        metavar="PROXY",
        type=str,
        help="proxy to use, if necessary")
    parser.add_argument(
        '--sleep-secs',
        metavar="TIME",
        type=int,
        default=60,
        help="time to wait between fetches")
    args = parser.parse_args()

    print_sender = abdmail_printsender.MailSender(args.arcyd_email)
    mailer = abdmail_mailer.Mailer(
        print_sender,
        [args.admin_email],
        args.repo_desc)

    out = ConsoleOutput()
    while True:
        out.display("fetch: ")
        phlsys_subprocess.runCommands("git fetch -p")

        # XXX: until conduit refreshes the connection, we'll suffer from
        #      timeouts; reduce the probability of this by using a new
        #      conduit each time.
        conduit = phlsys_conduit.Conduit(
            args.instance_uri,
            args.arcyd_user,
            args.arcyd_cert,
            https_proxy=args.https_proxy)

        out.display("process: ")
        abdcmd_default.processUpdatedRepo(conduit, ".", "origin", mailer)

        sleep_remaining = args.sleep_secs
        while sleep_remaining > 0:
            out.display("sleep (" + str(sleep_remaining) + " seconds) ")
            time.sleep(1)
            sleep_remaining -= 1


if __name__ == "__main__":
    sys.exit(main())

#------------------------------------------------------------------------------
# Copyright (C) 2012 Bloomberg L.P.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.
#------------------------------- END-OF-FILE ----------------------------------
