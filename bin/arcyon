#!/usr/bin/env python
# encoding: utf-8

"""Arcyon - util to interact with Conduit API from the command-line.

Intended to make the Conduit API easily accessible and discoverable from a
dedicated command-line tool.  This should make it easier to write shell scripts
which extend Phabricator.

"""

_USAGE_EXAMPLES = """
usage example:
    to display the config that arcyon will use:
    $ arcyon show-config
    """

import argparse
import datetime
import os
import string
import sys

# append "../py/" to sys.path, which is the list of paths to search for modules
# this is so we can import our libraries directly
# N.B. this is only really passable in the module that defines main()
sys.path.append(
    os.path.join(
        os.path.dirname(
            os.path.dirname(
                os.path.realpath(__file__))),
        "py"))

import phlcon_user
import phlsys_arcconfig
import phlsys_arcrc
import phlsys_conduit
import phlsys_strtotime
import phlsys_subcommand


class ShowConfig(object):
    """show the configuration as discovered from the current directory."""

    @staticmethod
    def getFromfilePrefixChars():
        return ""

    @staticmethod
    def setupParser(parser):
        pass

    @staticmethod
    def process(args):
        print phlsys_arcrc.getArcrc()
        print phlsys_arcconfig.getArcconfig()


class DifferentialQuery(object):
    """display and filter the list of revisions."""

    @staticmethod
    def getFromfilePrefixChars():
        return ""

    @staticmethod
    def setupParser(parser):
        filters = parser.add_argument_group('filter parameters')
        self_filters = parser.add_argument_group('self filter parameters')
        user_filters = parser.add_argument_group('user filter parameters')
        time_filters = parser.add_argument_group('time filter parameters')
        fmts = parser.add_argument_group(
            'output format parameters', 'choose one only, default is "short"')
        formats = fmts.add_mutually_exclusive_group()

        filters.add_argument(
            '--status',
            type=str,
            choices=['open', 'accepted', 'closed'],
            help="limit output to only this status")

        self_filters.add_argument(
            '--author-me',
            action='store_true',
            help="add yourself to the authors filter")
        self_filters.add_argument(
            '--reviewer-me',
            action='store_true',
            help="add yourself to the reviewers filter")
        self_filters.add_argument(
            '--cc-me',
            action='store_true',
            help="add yourself to the ccs filter")
        self_filters.add_argument(
            '--subscriber-me',
            action='store_true',
            help="add yourself to the subscribers filter")
        self_filters.add_argument(
            '--responsible-me',
            action='store_true',
            help="add yourself to the responsibleUsers filter")

        user_filters.add_argument(
            '--authors',
            type=str,
            nargs="+",
            default=[],
            metavar='USER',
            help="add usernames to the authors filter")
        user_filters.add_argument(
            '--reviewers',
            type=str,
            nargs="+",
            default=[],
            metavar='USER',
            help="add usernames to the reviewers filter")
        user_filters.add_argument(
            '--ccs',
            type=str,
            nargs="+",
            default=[],
            metavar='USER',
            help="add usernames to the ccs filter")
        user_filters.add_argument(
            '--subscribers',
            type=str,
            nargs="+",
            default=[],
            metavar='USER',
            help="add usernames to the subscribers filter")
        user_filters.add_argument(
            '--responsible-users',
            type=str,
            nargs="+",
            default=[],
            metavar='USER',
            help="add usernames to the responsibleUsers filter")

        time_filters.add_argument(
            '--update-min-age',
            type=str,
            metavar='AGE',
            help='include reviews which are at least AGE old. '
                 + phlsys_strtotime.describeDurationStringToTimeDelta())

        formats.add_argument(
            '--format-type',
            choices=['json', 'short', 'ids'],
            help="see usage examples for sample output")
        formats.add_argument(
            '--format-string',
            metavar='FORMAT',
            type=str,
            help="compose your own output format, e.g. '$id $title', see "
                 "usage examples for more details")

    @staticmethod
    def process(args):
        conduit = makeConduit(args)
        me = conduit.getUser()

        d = {}

        def processUserField(name, param, add_me):
            d[name] = param
            if add_me:
                d[name].append(me)

        processUserField("authors", args.authors, args.author_me)
        processUserField("reviewers", args.reviewers, args.reviewer_me)
        processUserField("ccs", args.ccs, args.cc_me)
        processUserField("subscribers", args.subscribers, args.subscriber_me)
        processUserField(
            "responsibleUsers",
            args.responsible_users,
            args.responsible_me)

        users = [u for users in d.itervalues() for u in users]
        users = list(set(users))
        userToPhid = {}
        if users:
            userToPhid = phlcon_user.makeUsernamePhidDict(conduit, users)

        # XXX: check for duplicates in author and reviewer
        # XXX: check for bad userToPhid
        for key in d.iterkeys():
            d[key] = [userToPhid[u] for u in d[key]]

        if args.status:
            d["status"] = "status-" + args.status

        results = conduit.call("differential.query", d)

        if args.update_min_age:
            min_age = phlsys_strtotime.durationStringToTimeDelta(
                args.update_min_age)
            now = datetime.datetime.now()
            new_results = []
            for r in results:
                modified = datetime.datetime.fromtimestamp(
                    float(r["dateModified"]))
                age = now - modified
                if age >= min_age:
                    new_results.append(r)
            results = new_results

        if not args.format_type and not args.format_string:
            args.format_type = "short"
        if args.format_type:
            if args.format_type == "json":
                print results
            elif args.format_type == "short":
                shortTemplate = string.Template("$id $title $statusName")
                for x in results:
                    print shortTemplate.safe_substitute(x)
            elif args.format_type == "ids":
                shortTemplate = string.Template("$id")
                for x in results:
                    print shortTemplate.safe_substitute(x)
            else:
                raise Exception("unsupported format")
        else:
            template = string.Template(args.format_string)
            for x in results:
                print template.safe_substitute(x)


def makeConduit(args):
    uri, user, cert = getUriUserCertificate()
    return phlsys_conduit.Conduit(uri, user, cert)


def getUriUserCertificate():
    arcrc = phlsys_arcrc.getArcrc()
    arcconfig = phlsys_arcconfig.getArcconfig()
    uri = arcconfig["conduit_uri"]
    uri = phlsys_conduit.makeConduitUri(uri)
    credentials = phlsys_arcrc.getHost(arcrc, uri)
    user = credentials["user"]
    cert = credentials["cert"]
    return uri, user, cert


def main():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=__doc__,
        epilog=_USAGE_EXAMPLES)

    subparsers = parser.add_subparsers()

    phlsys_subcommand.setupParser("show-config", ShowConfig, subparsers)
    phlsys_subcommand.setupParser("query", DifferentialQuery, subparsers)

    args = parser.parse_args()
    args.func(args)


if __name__ == "__main__":
    sys.exit(main())

#------------------------------------------------------------------------------
# Copyright (C) 2012 Bloomberg L.P.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.
#------------------------------- END-OF-FILE ----------------------------------
