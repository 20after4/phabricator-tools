#!/usr/bin/env python
# encoding: utf-8

"""Arcyon - util to interact with Conduit API from the command-line.

Intended to make the Conduit API easily accessible and discoverable from a
dedicated command-line tool.  This should make it easier to write shell scripts
which extend Phabricator.

"""

_USAGE_EXAMPLES = """
usage example:
    to display the config that arcyon will use:
    $ arcyon show-config
    """

import argparse
import os
import sys

# append "../py/" to sys.path, which is the list of paths to search for modules
# this is so we can import our libraries directly
# N.B. this is only really passable in the module that defines main()
sys.path.append(
    os.path.join(
        os.path.dirname(
            os.path.dirname(
                os.path.realpath(__file__))),
        "py"))

import phlcon_user
import phlsys_arcconfig
import phlsys_arcrc
import phlsys_conduit
import phlsys_subcommand


class ShowConfig(object):
    """show the configuration as discovered from the current directory."""

    @staticmethod
    def getFromfilePrefixChars():
        return ""

    @staticmethod
    def setupParser(parser):
        pass

    @staticmethod
    def process(args):
        print phlsys_arcrc.getArcrc()
        print phlsys_arcconfig.getArcconfig()


class DifferentialQuery(object):
    """display and filter the list of revisions."""

    @staticmethod
    def getFromfilePrefixChars():
        return ""

    @staticmethod
    def setupParser(parser):
        parser.add_argument(
            '--author-me',
            action='store_true',
            help="add yourself to the authors filter")
        parser.add_argument(
            '--authors',
            type=str,
            nargs="+",
            default=[],
            help="add usernames to the authors filter")
        parser.add_argument(
            '--reviewer-me',
            action='store_true',
            help="add yourself to the reviewers filter")
        parser.add_argument(
            '--reviewers',
            type=str,
            nargs="+",
            default=[],
            help="add usernames to the reviewers filter")
        parser.add_argument(
            '--cc-me',
            action='store_true',
            help="add yourself to the ccs filter")
        parser.add_argument(
            '--ccs',
            type=str,
            nargs="+",
            default=[],
            help="add usernames to the ccs filter")
        parser.add_argument(
            '--subscriber-me',
            action='store_true',
            help="add yourself to the subscribers filter")
        parser.add_argument(
            '--subscribers',
            type=str,
            nargs="+",
            default=[],
            help="add usernames to the subscribers filter")
        parser.add_argument(
            '--responsible-user-me',
            action='store_true',
            help="add yourself to the responsibleUsers filter")
        parser.add_argument(
            '--responsible-users',
            type=str,
            nargs="+",
            default=[],
            help="add usernames to the responsibleUsers filter")

    @staticmethod
    def process(args):
        conduit = makeConduit(args)
        authors = args.authors
        reviewers = args.reviewers
        ccs = args.ccs
        subscribers = args.subscribers
        responsible_users = args.responsible_users

        if args.author_me:
            authors.append(conduit.getUser())
        if args.reviewer_me:
            reviewers.append(conduit.getUser())
        if args.cc_me:
            ccs.append(conduit.getUser())
        if args.subscriber_me:
            subscribers.append(conduit.getUser())
        if args.responsible_user_me:
            responsible_users.append(conduit.getUser())

        users = authors + reviewers + ccs + subscribers + responsible_users
        users = list(set(users))
        userToPhid = {}
        if users:
            userToPhid = phlcon_user.makeUsernamePhidDict(conduit, users)

        # XXX: check for duplicates in author and reviewer
        # XXX: check for bad userToPhid
        d = {}
        if authors:
            d["authors"] = [userToPhid[u] for u in authors]
        if reviewers:
            d["reviewers"] = [userToPhid[u] for u in reviewers]
        if ccs:
            d["ccs"] = [userToPhid[u] for u in ccs]
        if subscribers:
            d["subscribers"] = [userToPhid[u] for u in subscribers]
        if responsible_users:
            d["responsibleUsers"] = [userToPhid[u] for u in responsible_users]

        results = conduit.call("differential.query", d)
        for x in results:
            x_id = x["id"]
            x_title = x["title"]
            x_status = x["statusName"]
            print "%s %s %s" % (x_id, x_status, x_title)


def makeConduit(args):
    uri, user, cert = getUriUserCertificate()
    return phlsys_conduit.Conduit(uri, user, cert)


def getUriUserCertificate():
    arcrc = phlsys_arcrc.getArcrc()
    arcconfig = phlsys_arcconfig.getArcconfig()
    uri = arcconfig["conduit_uri"]
    uri = phlsys_conduit.makeConduitUri(uri)
    credentials = phlsys_arcrc.getHost(arcrc, uri)
    user = credentials["user"]
    cert = credentials["cert"]
    return uri, user, cert


def main():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=__doc__,
        epilog=_USAGE_EXAMPLES)

    subparsers = parser.add_subparsers()

    phlsys_subcommand.setupParser("show-config", ShowConfig, subparsers)
    phlsys_subcommand.setupParser("query", DifferentialQuery, subparsers)

    args = parser.parse_args()
    args.func(args)


if __name__ == "__main__":
    sys.exit(main())

#------------------------------------------------------------------------------
# Copyright (C) 2012 Bloomberg L.P.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.
#------------------------------- END-OF-FILE ----------------------------------
